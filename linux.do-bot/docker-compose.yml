# author: df
# version: 2.0
# date: 2024.8.19
# description: linux-do-bot for keep alive in linux.do

# 1.0 is dead. Miagre to new sol.
# doc: https://linux.do/t/topic/180255
# https://linux.do/t/topic/243565


# docker run --name linux.do-keep-alive -e LINUXDO_USERNAME=xxx -e LINUXDO_PASSWORD=xxx -e SCROLL_DURATION=5 -e VIEW_COUNT=1000 -e CRON_RULE='0 8 * * *' oozzbb/linux.do-keep-alive:latest
# to compose
version: '3.7'

services:
  linux.do-keep-alive-master:
    image: oozzbb/linux.do-keep-alive:latest
    container_name: linux.do-keep-alive
    environment:
      LINUXDO_USERNAME: ${LINUXDO_USERNAME_ID1}  # 替换为你的 LinuxDO 用户名
      LINUXDO_PASSWORD: ${LINUXDO_PASSWORD_PASS1}  # 替换为你的 LinuxDO 密码
      SCROLL_DURATION: 5
      VIEW_COUNT: 1000
      CRON_RULE: '0 13 * * *'
    restart: unless-stopped


  linux.do-keep-alive-vice:
    image: oozzbb/linux.do-keep-alive:latest
    container_name: linux.do-keep-alive
    environment:
      LINUXDO_USERNAME: ${LINUXDO_USERNAME_ID2}  # 替换为你的 LinuxDO 用户名
      LINUXDO_PASSWORD: ${LINUXDO_PASSWORD_PASSWD2}  # 替换为你的 LinuxDO 密码
      SCROLL_DURATION: 5
      VIEW_COUNT: 500
      CRON_RULE: '0 13 * * *'
    restart: unless-stopped
# env doc
# push_config = {
#     'HITOKOTO': True,                  # 启用一言（随机句子）

#     'BARK_PUSH': '',                    # bark IP 或设备码，例：https://api.day.app/DxHcxxxxxRxxxxxxcm/
#     'BARK_ARCHIVE': '',                 # bark 推送是否存档
#     'BARK_GROUP': '',                   # bark 推送分组
#     'BARK_SOUND': '',                   # bark 推送声音
#     'BARK_ICON': '',                    # bark 推送图标
#     'BARK_LEVEL': '',                   # bark 推送时效性
#     'BARK_URL': '',                     # bark 推送跳转 URL

#     'CONSOLE': False,                    # 控制台输出

#     'DD_BOT_SECRET': '',                # 钉钉机器人的 DD_BOT_SECRET
#     'DD_BOT_TOKEN': '',                 # 钉钉机器人的 DD_BOT_TOKEN

#     'FSKEY': '',                        # 飞书机器人的 FSKEY

#     'GOBOT_URL': '',                    # go-cqhttp
#                                         # 推送到个人 QQ：http://127.0.0.1/send_private_msg
#                                         # 群：http://127.0.0.1/send_group_msg
#     'GOBOT_QQ': '',                     # go-cqhttp 的推送群或用户
#                                         # GOBOT_URL 设置 /send_private_msg 时填入 user_id = 个人 QQ
#                                         #               /send_group_msg   时填入 group_id=QQ 群
#     'GOBOT_TOKEN': '',                  # go-cqhttp 的 access_token

#     'GOTIFY_URL': '',                   # gotify 地址，如 https://push.example.de:8080
#     'GOTIFY_TOKEN': '',                 # gotify 的消息应用 token
#     'GOTIFY_PRIORITY': 0,               # 推送消息优先级，默认为 0

#     'IGOT_PUSH_KEY': '',                # iGot 聚合推送的 IGOT_PUSH_KEY

#     'PUSH_KEY': '',                     # server 酱的 PUSH_KEY，兼容旧版与 Turbo 版

#     'DEER_KEY': '',                     # PushDeer 的 PUSHDEER_KEY
#     'DEER_URL': '',                     # PushDeer 的 PUSHDEER_URL

#     'CHAT_URL': '',                     # synology chat url
#     'CHAT_TOKEN': '',                   # synology chat token

#     'PUSH_PLUS_TOKEN': '',              # push+ 微信推送的用户令牌
#     'PUSH_PLUS_USER': '',               # push+ 微信推送的群组编码

#     'WE_PLUS_BOT_TOKEN': '',            # 微加机器人的用户令牌
#     'WE_PLUS_BOT_RECEIVER': '',         # 微加机器人的消息接收者
#     'WE_PLUS_BOT_VERSION': 'pro',          # 微加机器人的调用版本

#     'QMSG_KEY': '',                     # qmsg 酱的 QMSG_KEY
#     'QMSG_TYPE': '',                    # qmsg 酱的 QMSG_TYPE

#     'QYWX_ORIGIN': '',                  # 企业微信代理地址

#     'QYWX_AM': '',                      # 企业微信应用

#     'QYWX_KEY': '',                     # 企业微信机器人

#     'TG_BOT_TOKEN': '',                 # tg 机器人的 TG_BOT_TOKEN，例：1407203283:AAG9rt-6RDaaX0HBLZQq0laNOh898iFYaRQ
#     'TG_USER_ID': '',                   # tg 机器人的 TG_USER_ID，例：1434078534
#     'TG_API_HOST': '',                  # tg 代理 api
#     'TG_PROXY_AUTH': '',                # tg 代理认证参数
#     'TG_PROXY_HOST': '',                # tg 机器人的 TG_PROXY_HOST
#     'TG_PROXY_PORT': '',                # tg 机器人的 TG_PROXY_PORT

#     'AIBOTK_KEY': '',                   # 智能微秘书 个人中心的 apikey 文档地址：http://wechat.aibotk.com/docs/about
#     'AIBOTK_TYPE': '',                  # 智能微秘书 发送目标 room 或 contact
#     'AIBOTK_NAME': '',                  # 智能微秘书  发送群名 或者好友昵称和 type 要对应好

#     'SMTP_SERVER': '',                  # SMTP 发送邮件服务器，形如 smtp.exmail.qq.com:465
#     'SMTP_SSL': 'false',                # SMTP 发送邮件服务器是否使用 SSL，填写 true 或 false
#     'SMTP_EMAIL': '',                   # SMTP 收发件邮箱，通知将会由自己发给自己
#     'SMTP_PASSWORD': '',                # SMTP 登录密码，也可能为特殊口令，视具体邮件服务商说明而定
#     'SMTP_NAME': '',                    # SMTP 收发件人姓名，可随意填写

#     'PUSHME_KEY': '',                   # PushMe 的 PUSHME_KEY
#     'PUSHME_URL': '',                   # PushMe 的 PUSHME_URL

#     'CHRONOCAT_QQ': '',                 # qq 号
#     'CHRONOCAT_TOKEN': '',              # CHRONOCAT 的 token
#     'CHRONOCAT_URL': '',                # CHRONOCAT 的 url 地址

#     'WEBHOOK_URL': '',                  # 自定义通知 请求地址
#     'WEBHOOK_BODY': '',                 # 自定义通知 请求体
#     'WEBHOOK_HEADERS': '',              # 自定义通知 请求头
#     'WEBHOOK_METHOD': '',               # 自定义通知 请求方法
#     'WEBHOOK_CONTENT_TYPE': ''          # 自定义通知 content-type
# }