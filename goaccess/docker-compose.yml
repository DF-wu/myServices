# GoAccess on Docker: 全自動化部署方案
#
# 版本: 4.0 (2025-07-07)
# 設計者: chufei & Copilot
#
# --- 設計哲學 ---
# 1.  **零手動介入**: 部署過程無需在主機上手動建立任何檔案、目錄或執行前置腳本。
# 2.  **.env 驅動**: 所有可變參數（路徑、連接埠、GoAccess 選項）全部抽離至 .env 檔案，Compose 檔案本身保持穩定，不輕易改動。
# 3.  **開箱即用**: 容器啟動時，所有外部依賴（如 GeoIP 資料庫）應自動下載並配置。
# 4.  **安全與健壯**: 腳本應採用最佳實踐，避免常見的 shell 風險（如 eval 注入），並在偵錯模式下（set -x）提供清晰的執行過程。
#
# --- 核心功能 ---
# - **全自動 GeoIP**: 無需註冊或 API 金鑰。容器啟動時會自動從 DB-IP 下載最新的免費城市和 ASN 資料庫。
# - **動態命令生成**: Entrypoint 腳本會根據 .env 中的設定，安全地組合最終的 GoAccess 執行命令。
# - **持久化**: 報告、歷史資料庫和 GeoIP 檔案統一儲存在掛載的資料卷中，確保資料不遺失。
# - **極簡維護**: 未來升級或調整 GoAccess 功能，只需修改 .env 中的 GOACCESS_OPTS 變數即可。
#
# --- 重要提示 ---
# - 此 Compose 檔案中的所有 `${VAR}` 變數都應在 `.env` 檔案中定義。
# - Entrypoint 腳本中的所有 `$$VAR` 或 `$${VAR}` 寫法是為了防止 Docker Compose 進行變數替換，
#   確保 `$` 符號能被正確傳遞到容器內的 shell 環境中。
#
services:
  goaccess:
    image: allinurl/goaccess:latest
    container_name: goaccess
    restart: unless-stopped
    user: root
    ports:
      - "7890:7890"
    volumes:
      # 掛載整個資料目錄，統一管理報告、資料庫和 GeoIP 檔案
      - "/mnt/appdata/goaccess:/goaccess/data"
      # 以唯讀模式掛載日誌來源目錄
      - "/mnt/appdata/NginxProxyManager/logs:/srv/logs:ro"
    env_file:
      - ./.env
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -ex
        echo "🚀 正在初始化 GoAccess (v3.2 - DB-IP)..."

        # --- 1. 自動下載 GeoIP 資料庫 (DB-IP) ---
        GEOIP_DIR="/goaccess/data/geoip"
        # 檢查任一檔案不存在時，就觸發下載
        if [ ! -f "$$GEOIP_DIR/dbip-city-lite.mmdb" ] || [ ! -f "$$GEOIP_DIR/dbip-asn-lite.mmdb" ]; then
          echo "🌐 正在下載最新的 DB-IP GeoIP 資料庫 (免費版)..."
          mkdir -p "$$GEOIP_DIR"
          CURRENT_YM=$$(date +%Y-%m)
          # 使用 curl 下載並解壓
          curl -L "https://download.db-ip.com/free/dbip-city-lite-$${CURRENT_YM}.mmdb.gz" | gunzip > "$$GEOIP_DIR/dbip-city-lite.mmdb"
          curl -L "https://download.db-ip.com/free/dbip-asn-lite-$${CURRENT_YM}.mmdb.gz" | gunzip > "$$GEOIP_DIR/dbip-asn-lite.mmdb"
          echo "✅ GeoIP 資料庫已就緒。"
        else
          echo "✅ GeoIP 資料庫已存在，略過下載。"
        fi

        # --- 2. 組合並執行最終命令 (安全模式) ---
        # 組合固定的核心參數
        FIXED_ARGS="--output=/goaccess/data/report.html --real-time-html --addr=0.0.0.0 --port=7890 --daemonize --pid-file=/goaccess/data/goaccess.pid --db-path=/goaccess/data/"
        [ -f "$$GEOIP_DIR/dbip-city-lite.mmdb" ] && FIXED_ARGS="$$FIXED_ARGS --geoip-database=$$GEOIP_DIR/dbip-city-lite.mmdb"
        [ -f "$$GEOIP_DIR/dbip-asn-lite.mmdb" ] && FIXED_ARGS="$$FIXED_ARGS --geoip-database=$$GEOIP_DIR/dbip-asn-lite.mmdb"

        echo "--------------------------------------------------"
        echo "🚀 正在啟動 GoAccess..."
        echo "日誌來源: /srv/logs/$${LOG_FILE}"
        echo "自訂參數: $${GOACCESS_OPTS}"
        echo "--------------------------------------------------"

        # 使用 exec 直接執行，取代目前的 shell 程序。
        # 讓 shell 自動對 GOACCESS_OPTS 進行單詞分割來傳遞參數。
        # 這種寫法更為通用和直觀，同時保留了 exec 帶來的程序管理優勢。
        exec goaccess "/srv/logs/$${LOG_FILE}" $${GOACCESS_OPTS} $${FIXED_ARGS}

    command: [] # command 留空，因為所有命令已由 entrypoint 全權處理
