# ----------------------------------------------------------------------
# GoAccess 環境設定檔範本 (v3.1 - DB-IP)
#
# 使用方式:
# 1. 複製此檔案為 .env (cp .env.example .env)
# 2. 根據您的需求修改以下變數。
# 3. 所有 GoAccess 的功能都由 GOACCESS_OPTS 這一個變數集中控制。
# ----------------------------------------------------------------------

# --- 基礎設定 (必填) ---

# 時區設定 (例如: Asia/Shanghai, UTC)
TZ=${TZ:-Asia/Taipei}

# GoAccess 對外服務的 Web UI 連接埠
GOACCESS_PORT=7890

# WebSocket 連線 URL (極為重要，請填寫您的公開網域或IP)
GOACCESS_WS_URL=*

# --- 日誌分析設定 (必填) ---

# 要分析的日誌檔名 (支援萬用字元 *)
LOG_FILE=*_access.log

# ----------------------------------------------------------------------
# --- 全功能控制中心 (GOACCESS_OPTS) ---
# ----------------------------------------------------------------------
#
# 將所有您需要的 GoAccess 命令列參數全部寫在這裡，用空格隔開。
# 這是控制 GoAccess 行為的唯一入口點。
# GeoIP 資料庫會由 compose 自動偵測並加入，無需在此設定。
#
# 以下是一個包含所有常用功能的完整範例。
# 您可以根據需要，複製、刪除或修改其中的任何部分，來組成您自己的設定。
# 為了可讀性，範例使用了 `\` 進行換行，您也可以將所有參數寫在同一行。
#
# ----------------------------------------------------------------------

GOACCESS_OPTS="\
  --log-format='%h %^[%d:%t %^] \"%r\" %s %b \"%R\" \"%u\"' \
  --time-format='%H:%M:%S' \
  --date-format='%d/%b/%Y' \
  --html-report-title='DF Awesome Server Stats' \
  --html-prefs='{\"theme\":\"darkly\"}' \
  --sort-panel=VISITORS,BY_HITS,DESC \
  --max-items=256 \
  --persist \
  --restore \
  --keep-last=365 \
  --444-as-404 \
  --4xx-to-unique-count \
  --jobs=4 \
"

# --- GOACCESS_OPTS 參數詳細註解 (供您參考) ---
#
# --- 以下為可選參數，您可以將需要的行複製到上面的 GOACCESS_OPTS 中 ---
#
# --ignore-ip=127.0.0.1
# --ignore-crawler='Googlebot'
# --ignore-crawler='bingbot'
# --ignore-status=401
# --ignore-referrer='*.spam.com'
#
# ----------------------------------------------------------------------
# GoAccess Docker Compose - v3.2 (DB-IP 全自動安全版)
version: "3.8"

services:
  goaccess:
    image: allinurl/goaccess:latest
    container_name: goaccess
    restart: unless-stopped
    ports:
      - "${GOACCESS_PORT:-7890}:7890"
    volumes:
      # 掛載整個資料目錄，統一管理報告、資料庫和 GeoIP 檔案
      - "${DATA_PATH:-/mnt/appdata/goaccess}:/goaccess/data"
      # 以唯讀模式掛載日誌來源目錄
      - "${NGINX_LOG_PATH}:/srv/logs:ro"
    env_file:
      - ./.env
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -e
        echo "🚀 正在初始化 GoAccess (v3.2 - DB-IP)..."

        # --- 1. 自動下載 GeoIP 資料庫 (DB-IP) ---
        DB_DIR="/goaccess/data/geoip"
        # 檢查任一檔案不存在時，就觸發下載
        if [ ! -f "$DB_DIR/dbip-city-lite.mmdb" ] || [ ! -f "$DB_DIR/dbip-asn-lite.mmdb" ]; then
          echo "🌐 正在下載最新的 DB-IP GeoIP 資料庫 (免費版)..."
          mkdir -p "$DB_DIR"
          CURRENT_YM=$(date +%Y-%m)
          # 使用 curl 下載並解壓
          curl -L "https://download.db-ip.com/free/dbip-city-lite-${CURRENT_YM}.mmdb.gz" | gunzip > "$DB_DIR/dbip-city-lite.mmdb"
          curl -L "https://download.db-ip.com/free/dbip-asn-lite-${CURRENT_YM}.mmdb.gz" | gunzip > "$DB_DIR/dbip-asn-lite.mmdb"
          echo "✅ GeoIP 資料庫已就緒。"
        else
          echo "✅ GeoIP 資料庫已存在，略過下載。"
        fi

        # --- 2. 組合並執行最終命令 (安全模式) ---
        # 組合固定的核心參數
        FIXED_ARGS="--output=/goaccess/data/report.html --real-time-html --addr=0.0.0.0 --port=7890 --daemonize --pid-file=/goaccess/data/goaccess.pid --db-path=/goaccess/data/"
        [ -f "$DB_DIR/dbip-city-lite.mmdb" ] && FIXED_ARGS="$FIXED_ARGS --geoip-database=$DB_DIR/dbip-city-lite.mmdb"
        [ -f "$DB_DIR/dbip-asn-lite.mmdb" ] && FIXED_ARGS="$FIXED_ARGS --geoip-database=$DB_DIR/dbip-asn-lite.mmdb"

        echo "--------------------------------------------------"
        echo "🚀 正在啟動 GoAccess..."
        echo "日誌來源: /srv/logs/${LOG_FILE}"
        echo "自訂參數: ${GOACCESS_OPTS}"
        echo "--------------------------------------------------"

        # 使用 set -- 和 exec 來安全地處理參數，避免 eval 帶來的風險
        # $GOACCESS_OPTS 會被 shell 安全地分割成獨立的參數
        set -- ${GOACCESS_OPTS}
        exec goaccess "/srv/logs/${LOG_FILE}" "$@" ${FIXED_ARGS}

    command: [] # command 留空，因為所有命令已由 entrypoint 全權處理
```
### 啟動流程詳解

1.  **初始化**: 容器啟動時，執行 `entrypoint` 中的 shell 腳本。
2.  **GeoIP 資料庫檢查與下載 (DB-IP)**:
   - 腳本會檢查持久化目錄 `/goaccess/data/geoip` 中是否存在 DB-IP 的資料庫檔案 (`dbip-city-lite.mmdb`, `dbip-asn-lite.mmdb`)。
   - 如果檔案**不存在**，它會使用 `curl` 自動從 DB-IP 的官方下載點獲取當月最新的免費版資料庫，並解壓縮。
   - 如果檔案已存在，則會跳過下載，避免不必要的網路請求。若您想強制更新，可以手動刪除主機上對應的 `.mmdb` 檔案後重啟容器。
3.  **動態命令組合**:
   - **日誌來源**: `goaccess /srv/logs/${LOG_FILE}` - 指向您掛載的日誌檔（注意路徑已更新為 `/srv/logs`）。
   - **使用者自訂參數**: `${GOACCESS_OPTS}` - 將您在 `.env` 中設定的所有 GoAccess 參數原封不動地加到命令列中。
   - **核心固定參數**: `FIXED_ARGS` - 包含必要的參數，並自動加上剛剛下載好的 DB-IP 資料庫路徑。
4.  **安全執行命令**: 腳本最後會使用 `set --` 和 `exec` 來組合並執行 `goaccess` 命令。這種方法比 `eval` 更安全，可以有效防止潛在的 shell 注入風險，同時能正確處理帶有空格或特殊字元的參數。

這種設計的好處是，`docker-compose.yml` 檔案本身變得非常穩定，幾乎不需要修改。未來若要新增或調整 GoAccess 的任何功能，您**只需要專注於修改 `.env` 檔案中的 `GOACCESS_OPTS` 變數即可**，實現了設定與架構的完全分離。

## 📚 如何找到 Nginx Proxy Manager (NPM) 的日誌路徑

要讓 GoAccess 分析您的網站流量，首先需要找到 Nginx Proxy Manager (NPM) 儲存 `access.log` 的位置。這通常在您部署 NPM 的 `docker-compose.yml` 中定義。

1. **找到 NPM 的 `docker-compose.yml`**：這個檔案通常在您當初設定 NPM 的目錄下，例如 `/some/path/to/your/npm/docker-compose.yml`。

2. **尋找 `logs` 掛載卷**：在該檔案中，找到 `services` -> `app` -> `volumes` 區塊。您會看到類似這樣的設定：
```yaml
services:
     app:
       # ... 其他設定 ...
       volumes:
         - ./data:/data
         - ./letsencrypt:/etc/letsencrypt
         - ./logs:/data/logs  # <--- 這就是我們要找的！
```
3. **確定主機路徑**：
   - 在這個例子中，`./logs:/data/logs` 的意思是，主機上相對於 `docker-compose.yml` 的 `logs` 目錄，被掛載到了 NPM 容器內的 `/data/logs`。
   - 因此，NPM 產生的所有 access log，實際上都儲存在您主機的 `./logs` 目錄中。
   - 您需要取得這個目錄的**絕對路徑**。例如，如果您的 NPM compose 檔案在 `/root/stacks/npm/docker-compose.yml`，那麼日誌的絕對路徑就是 `/root/stacks/npm/logs`。

4. **填入 `.env` 檔案**：
   - 將您找到的絕對路徑填入 GoAccess 的 `.env` 檔案中：
```env
NGINX_LOG_PATH=/root/stacks/npm/logs
```
cker-compose.yml`，那麼日誌的絕對路徑就是 `/root/stacks/npm/logs`。

4. **填入 `.env` 檔案**：
   - 將您找到的絕對路徑填入 GoAccess 的 `.env` 檔案中：
```env
NGINX_LOG_PATH=/root/stacks/npm/logs
```
